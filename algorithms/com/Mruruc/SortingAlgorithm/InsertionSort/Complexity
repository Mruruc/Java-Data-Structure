Time complexity:
O(n^2), where n is the number of elements in the array.
This means that the number of comparisons and swaps required to sort
the array increases quadratically with the size of the input array.
For example, if the input array has 10 elements,
the number of comparisons and swaps could be as high as 100.

Space complexity:
O(1).This means that the amount of additional memory required by the algorithm remains constant
regardless of the size of the input array. In other words,
the amount of memory required does not depend on the size of the array.
For example, if the input array has 10 elements,
the algorithm would use the same amount of memory as it would for an array with 100 elements.